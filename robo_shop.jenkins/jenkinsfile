def affected = []

pipeline {
    agent any
    
     options {
        skipDefaultCheckout()
    }
    environment{
        DOCKER_CREDS= 'DOCKER_CREDS'
    }

    stages {
        stage('Updating Repository'){
            steps{
                git branch: 'main', url: 'https://github.com/KBALAJI2212/ROBO_SHOP'
                sh 'git fetch origin main'
            }
        }

        stage('Detecting Repository Changes'){
            steps{
                script{
                    def changedServices = sh(
                        script :"git diff --name-only HEAD~1 HEAD | grep '^robo_shop\\.jenkins/' | cut -d/ -f2 | sort -u",
                        returnStdout:  true).trim().split("\n")
                    def knownServices = ['user','cart','catalogue','shipping','payment','web']

                    echo "Comparing Files to detect Changes."
                    echo "Changed Files:${changedServices}"
                    echo "Finding Affected Services."

                    affected = changedServices.findAll { knownServices.contains(it) }

                    if (affected.isEmpty()){
                        echo "Affected Services:None"
                        echo "No Changes in Service Files.Skipping Next Stages."
                        currentBuild.result = 'SUCCESS'
                        return
                    }
                    echo "Affected Services:${affected}"

                }
            }
        }
         stage('Build & Deploy Changed Services'){
            when{
                expression{return affected && affected.size() > 0}
            }
            steps{
                script{

                   def userInput=input(message:"Detected Changes in [${affected.join(',')}] Services.Do you want to continue to build and deploy the new Docker Images for [${affected.join(',')}] Services?" , 
                   ok : "Submit" ,
                   parameters: [
                        choice(name: 'Confirm Build',choices:['Yes','No'],description:'Select Yes to continue or No to abort the build stage')
                    ])

                    if(userInput == 'No'){
                        echo "User Selected 'No',Aborting the Build and Deploy Stage"
                        currentBuild.result = 'ABORTED'
                        return
                    }
                    
                    echo "User Selected 'Yes',Proceeding with the Build and Deploy Stage" 

                    sh 'git pull origin main'

                    affected.each{service ->
                    def image = "kbalaji2212/roboshop"
                    def lastVersion = sh(
                            script: """
                                curl -s 'https://hub.docker.com/v2/repositories/kbalaji2212/roboshop/tags?page_size=100' | \
                                grep -o '"name":"${service}-v[0-9]\\+"' | \
                                sed 's/.*${service}-v\\([0-9]\\+\\)".*/\\1/' | \
                                sort -n | \
                                tail -1 || echo '0'
                            """,
                            returnStdout: true).trim()

                    def nextVersion = (lastVersion.isInteger() ? lastVersion.toInteger() + 1 : 1)
                    def tag = "${service}-v${nextVersion}"

                    echo "Building Docker Image for ${service} with new Tag [-v${nextVersion}]"

                    sh "docker build -t ${image}:${tag} ./robo_shop.jenkins/${service}/"

                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDS, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh """
                      echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                      docker push ${image}:${tag}
                      """
                    }

                    echo "Restarting ${service} Container"

                    sh """
                        docker stop ${service} || true
                        docker rm ${service} || true
                        docker run -d --name ${service} --network=roboshop ${image}:${tag}

                    """
                    }
                }
            }
        }

    }
}